When would you want to use a remote repository rather than keeping all your work local?
When there are multiple people working on the same piece of code, it's desirable to have a remote repository where each coder can push his/her local changes.

Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?
ANS: I would want to pull changes from the remote only when the changes in the remote repository make logical sense and would not break the code in my local repository.

Describe the differences between forks, clones, and branches. When would you use one instead of another?
ANS: Forking  is a process of getting a private copy of an existing repository on Github.
Clones are copies of existing remote repositories in a local machine.
Branches are different copies of the same codebase but each branch may be built from the same codebase but for different purposes.

What is the benefit of having a copy of the last known state of the remote stored locally?
ANS: If there are changes made to the local copy of the remote, it is beneficial to know from which point in the codebase changes were made. This helps while pushing the changes to the remote repository.

How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?
ANS: Without Github, I would have to collaborate with another coder by manually checking for changes and merging changes. It would be easier to have a tool like Git which points out the exact changes in each file in different versions.

When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?
When more than 1 person is working on the master branch it makes sense to add external functionality in a seperate branch and then merge changes into the master after feedback from the other people working on the master branch.
