What happens when you initialize a repository? Why do you need to do it?

ANS: Initializing a repository adds a .git file in the repository. It is done so that all the files in the repository could be tracked for their commits.

How is the staging area different from the working directory and the repository? What value do you think it offers?

ANS: Staging area consists of files which have a logical change ready to be committed to the repository. It gives a logical separation of files that have been modifies for a particular change. 

How can you use the staging area to make sure you have one commit per logical change?

ANS: I check the difference between the file in the staging area and the committed file. If the changes look good enough to be a logical change then that particular change could be committed.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

ANS: Branches are required when the code has to be branched out so that there could a major change in the code but the original code is not modified.

How do the diagrams help you visualize the branch structure?
ANS: It's easier to visualize a codebase with multiple branches when it is represented graphically.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
ANS: To add all the changes that were introduced in the branch to the main branch, merging the branch is needed. For better visualization.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?
Automatic merging 
PRO: Changes can be merged to the main codebase  as and when code is written.
CON: Changes are merged when it does not make a logical sense.

Merge Manually:
PRO: Change can be merged only when the author of the code needs merging.
CON: In case the author forgets to merge changes, it may be complicated to merge at a later stage.